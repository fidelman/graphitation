// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`allow passing in custom generateId function 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestCustomGenerateIdQuery {
  me {
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "me": {
      "id": "<User-mock-id-42>"
    }
  }
}
`;

exports[`check context in the mock resolver 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest11Query {
  viewer {
    ...RelayMockPayloadGeneratorTest11Fragment
  }
}

fragment RelayMockPayloadGeneratorTest11Fragment on Viewer {
  actor {
    __typename
    ... on User {
      id
      name
      profile_picture {
        uri
        height
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "viewer": {
      "actor": {
        "__typename": "User",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">",
        "profile_picture": {
          "uri": "http://my-image",
          "height": 100
        }
      }
    }
  }
}
`;

exports[`consider all possible types when given user specified typename 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestConsiderAllConcreteTypesQuery {
  node(id: "1") {
    __typename
    ... on User {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page"
    }
  }
}
`;

exports[`deeply merges fragment data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestDeepMergeQuery {
  node(id: "my-id") {
    ...RelayMockPayloadGeneratorTestDeepMergeFragment1
    ...RelayMockPayloadGeneratorTestDeepMergeFragment2
  }
}

fragment RelayMockPayloadGeneratorTestDeepMergeFragment1 on Page {
  author {
    environment
    address {
      city
    }
    ...RelayMockPayloadGeneratorTestDeepMergeFragment2
  }
}

fragment RelayMockPayloadGeneratorTestDeepMergeFragment2 on User {
  environment
  address {
    city
    country
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "author": {
        "environment": "WEB",
        "address": {
          "city": "<mock-value-for-field-\\"city\\">",
          "country": "<mock-value-for-field-\\"country\\">"
        }
      }
    }
  }
}
`;

exports[`different concrete types on an abstract list 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestDifferentConcreteTypesQuery {
  nodes(ids: ["1", "2", "3"]) {
    __typename
    ... on User {
      id
    }
    ... on Page {
      id
    }
    ... on Comment {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "nodes": [
      {
        "__typename": "User",
        "id": "1"
      },
      {
        "__typename": "Page",
        "id": "2"
      },
      {
        "__typename": "Comment",
        "id": "3"
      }
    ]
  }
}
`;

exports[`generate basic mock data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest6Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest6Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest6Fragment on User {
  id
  name
  author {
    id
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "author": {
        "id": "<User-mock-id-2>",
        "name": "<mock-value-for-field-\\"name\\">"
      }
    }
  }
}
`;

exports[`generate mock and verify arguments in the context 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest14Query($smallScale: Int = 1, $bigScale: Int = 100) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest14Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest14Fragment on User {
  id
  name
  smallImage: profile_picture(scale: $smallScale) {
    uri
  }
  bigImage: profile_picture(scale: $bigScale) {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "smallImage": {
        "uri": "small image"
      },
      "bigImage": {
        "uri": "big image"
      }
    }
  }
}
`;

exports[`generate mock for enum 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest1Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTestFragment
    id
  }
}

fragment RelayMockPayloadGeneratorTestFragment on User {
  id
  name
  profile_picture {
    uri
    width
    height
    test_enums
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42,
        "test_enums": "mark"
      }
    }
  }
}
`;

exports[`generate mock for multiple fragment spreads 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest17Query {
  node(id: "my-id") {
    __typename
    id
    ...RelayMockPayloadGeneratorTest20Fragment
  }
}

fragment RelayMockPayloadGeneratorTest20Fragment on User {
  body {
    text
  }
  actor {
    __typename
    name
    id
  }
  myActor: actor {
    __typename
    ...RelayMockPayloadGeneratorTest17Fragment
  }
  ...RelayMockPayloadGeneratorTest18Fragment
  ...RelayMockPayloadGeneratorTest19Fragment
}

fragment RelayMockPayloadGeneratorTest17Fragment on Page {
  id
  pageName: name
}

fragment RelayMockPayloadGeneratorTest18Fragment on User {
  id
  name
  username
}

fragment RelayMockPayloadGeneratorTest19Fragment on User {
  ...RelayMockPayloadGeneratorTest18Fragment
  profile_picture {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "body": {
        "text": "<mock-value-for-field-\\"text\\">"
      },
      "actor": {
        "__typename": "Page",
        "name": "<mock-value-for-field-\\"name\\">",
        "id": "<mock-id-2>"
      },
      "myActor": {
        "__typename": "Page",
        "id": "<mock-id-3>",
        "pageName": "<mock-value-for-field-\\"pageName\\">"
      },
      "name": "<mock-value-for-field-\\"name\\">",
      "username": "<mock-value-for-field-\\"username\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">"
      }
    }
  }
}
`;

exports[`generate mock for objects without concrete type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest9Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest9Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest9Fragment on Page {
  actor {
    __typename
    id
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "actor": {
        "__typename": "User",
        "id": "<User-mock-id-1>",
        "name": "Mark"
      },
      "id": "<mock-id-2>"
    }
  }
}
`;

exports[`generate mock for plural fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest16Query {
  nodes {
    __typename
    ...RelayMockPayloadGeneratorTest16Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest16Fragment on Comment @relay(plural: true) {
  id
  body {
    text
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "nodes": [
      {
        "__typename": "Comment",
        "id": "<mock-id-1>",
        "body": {
          "text": "<mock-value-for-field-\\"text\\">"
        }
      }
    ]
  }
}
`;

exports[`generate mock for simple fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest1Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTestFragment
    id
  }
}

fragment RelayMockPayloadGeneratorTestFragment on User {
  id
  name
  profile_picture {
    uri
    width
    height
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42
      }
    }
  }
}
`;

exports[`generate mock using custom mock functions 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest7Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest7Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest7Fragment on User {
  id
  name
  profile_picture {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-id-1001",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "http://my-uri"
      }
    }
  }
}
`;

exports[`generate mock using custom mock functions for object type (multiple object) 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest10Query {
  node(id: "my-id") {
    __typename
    id
    ...RelayMockPayloadGeneratorTest10Fragment
  }
}

fragment RelayMockPayloadGeneratorTest10Fragment on User {
  name
  actor {
    __typename
    ... on User {
      id
      name
      profile_picture {
        uri
        height
      }
    }
    id
  }
  profile_picture {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "My user name",
      "actor": {
        "__typename": "User",
        "id": "<mock-id-2>",
        "name": "My user name",
        "profile_picture": {
          "uri": "http://my-image",
          "height": 100
        }
      },
      "profile_picture": {
        "uri": "http://my-image"
      }
    }
  }
}
`;

exports[`generate mock using custom mock functions for object type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest8Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest8Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest8Fragment on Page {
  actor {
    __typename
    id
    name
  }
  backgroundImage {
    width
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "actor": {
        "__typename": "Page",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">"
      },
      "backgroundImage": {
        "width": 200,
        "uri": "http://my-image"
      },
      "id": "<mock-id-2>"
    }
  }
}
`;

exports[`generate mock with abstract inline fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest2Query {
  viewer {
    actor {
      __typename
      ...RelayMockPayloadGeneratorTest1Fragment
      id
    }
  }
}

fragment RelayMockPayloadGeneratorTest1Fragment on Actor {
  id
  ... on Named {
    name
  }
  ... on User {
    firstName
    lastName
  }
  ... on Page {
    websites
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "viewer": {
      "actor": {
        "__typename": "User",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">",
        "firstName": "<mock-value-for-field-\\"firstName\\">",
        "lastName": "<mock-value-for-field-\\"lastName\\">"
      }
    }
  }
}
`;

exports[`generate mock with condition (and other complications) 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest4Query($showProfilePicture: Boolean, $hideBirthday: Boolean, $showBirthdayMonth: Boolean, $hideAuthorUsername: Boolean) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest3Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest3Fragment on User {
  id
  name
  customId: id
  profile_picture @include(if: $showProfilePicture) {
    uri
  }
  birthdate @skip(if: $hideBirthday) {
    year
    month @include(if: $showBirthdayMonth)
  }
  author {
    name
    id
  }
  ... on User @skip(if: $hideAuthorUsername) {
    author {
      authorID: id
      objectType: __typename
      username
    }
  }
  allPhones {
    phoneNumber {
      displayNumber
    }
  }
  emailAddresses @__clientField(handle: "customName")
  backgroundImage @__clientField(handle: "customBackground") {
    uri
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "customId": "<mock-id-2>",
      "author": {
        "name": "<mock-value-for-field-\\"name\\">",
        "id": "<User-mock-id-3>"
      },
      "allPhones": [
        {
          "phoneNumber": {
            "displayNumber": "<mock-value-for-field-\\"displayNumber\\">"
          }
        }
      ],
      "emailAddresses": [
        "<mock-value-for-field-\\"emailAddresses\\">"
      ],
      "backgroundImage": {
        "uri": "<mock-value-for-field-\\"uri\\">"
      }
    }
  }
}
`;

exports[`generate mock with connection 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest5Query($first: Int, $skipUserInConnection: Boolean) {
  node(id: "my-id") {
    __typename
    id
    ...RelayMockPayloadGeneratorTest5Fragment
  }
}

fragment RelayMockPayloadGeneratorTest5Fragment on Page {
  actor {
    __typename
    ... on User {
      id
      myType: __typename
      myName: name
      name
      friends(first: $first) @connection(key: "FriendsConnection_friends") {
        edges {
          cursor
          node {
            id
            ...RelayMockPayloadGeneratorTest4Fragment @skip(if: $skipUserInConnection)
            __typename
          }
        }
        pageInfo {
          endCursor
          hasNextPage
        }
      }
      ...RelayMockPayloadGeneratorTest4Fragment
    }
  }
}

fragment RelayMockPayloadGeneratorTest4Fragment on User {
  name
  username
  emailAddresses
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "<mock-id-1>",
      "actor": {
        "__typename": "User",
        "id": "<mock-id-2>",
        "myType": "User",
        "myName": "<mock-value-for-field-\\"myName\\">",
        "name": "<mock-value-for-field-\\"name\\">",
        "friends": {
          "edges": [
            {
              "cursor": "<mock-value-for-field-\\"cursor\\">",
              "node": {
                "id": "<User-mock-id-3>",
                "__typename": "User"
              }
            }
          ],
          "pageInfo": {
            "endCursor": "<mock-value-for-field-\\"endCursor\\">",
            "hasNextPage": false
          }
        },
        "username": "<mock-value-for-field-\\"username\\">",
        "emailAddresses": [
          "<mock-value-for-field-\\"emailAddresses\\">"
        ]
      }
    }
  }
}
`;

exports[`generate mock with inline fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest3Query($condition: Boolean) {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest2Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest2Fragment on User {
  id
  name
  author {
    id
    name
  }
  ... on User {
    author {
      authorID: id
      username
    }
  }
  ... on User @include(if: $condition) {
    author {
      myId: id
      myUsername: username
      emailAddresses
      birthdate {
        day
        month
        year
      }
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "author": {
        "id": "<User-mock-id-2>",
        "name": "<mock-value-for-field-\\"name\\">",
        "authorID": "<User-mock-id-3>",
        "username": "<mock-value-for-field-\\"username\\">"
      }
    }
  }
}
`;

exports[`generate mock with manual mock for objects 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest12Query {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest12Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest12Fragment on Page {
  id
  name
  body {
    text
  }
  myTown: hometown {
    id
    name
    url
    feedback {
      comments(first: 10) {
        edges {
          cursor
          comment: node {
            id
            message {
              text
            }
            likeSentence {
              text
            }
          }
        }
        pageInfo {
          startCursor
        }
      }
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "page-id-1",
      "name": "My Page",
      "body": {
        "text": "My Text"
      },
      "myTown": {
        "id": "page-id-2",
        "name": "My Hometown",
        "url": "http://node-myTown",
        "feedback": {
          "comments": {
            "edges": [
              {
                "cursor": "<mock-value-for-field-\\"cursor\\">",
                "comment": {
                  "id": "<Comment-mock-id-3>",
                  "message": {
                    "text": "Comment text: node>myTown>feedback>comments>edges>comment"
                  },
                  "likeSentence": {
                    "text": "<mock-value-for-field-\\"text\\">"
                  }
                }
              }
            ],
            "pageInfo": {
              "startCursor": "<mock-value-for-field-\\"startCursor\\">"
            }
          },
          "id": "<Feedback-mock-id-4>"
        }
      }
    }
  }
}
`;

exports[`generate mock with multiple spreads 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest13Query {
  viewer {
    ...RelayMockPayloadGeneratorTest13Fragment
  }
}

fragment RelayMockPayloadGeneratorTest13Fragment on Viewer {
  actor {
    __typename
    ... on User {
      id
      name
      traits
      profile_picture {
        uri
        height
      }
    }
    ... on Page {
      id
      name
      websites
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "viewer": {
      "actor": {
        "__typename": "User",
        "id": "<mock-id-1>",
        "name": "<mock-value-for-field-\\"name\\">",
        "traits": [
          "CHEERFUL",
          "DERISIVE",
          "HELPFUL",
          "SNARKY"
        ],
        "profile_picture": {
          "uri": "<mock-value-for-field-\\"uri\\">",
          "height": 42
        }
      }
    }
  }
}
`;

exports[`merges data from concrete type mock with abstract type mock 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestDifferentConcreteTypesQuery {
  node(id: "page-42") {
    __typename
    ... on User {
      id
    }
    ... on Page {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "page-42"
    }
  }
}
`;

exports[`should return \`null\` for selection if that is specified in default values 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest19Query {
  node(id: "my-id") {
    __typename
    id
    ...RelayMockPayloadGeneratorTest27Fragment
  }
}

fragment RelayMockPayloadGeneratorTest27Fragment on User {
  body {
    text
  }
  actor {
    name
    id
  }
  myActor: actor {
    __typename
    ...RelayMockPayloadGeneratorTest24Fragment
  }
  ...RelayMockPayloadGeneratorTest25Fragment
}

fragment RelayMockPayloadGeneratorTest24Fragment on User {
  id
  name
}

fragment RelayMockPayloadGeneratorTest25Fragment on User {
  id
  name
  profile_picture {
    ...RelayMockPayloadGeneratorTest26Fragment
  }
}

fragment RelayMockPayloadGeneratorTest26Fragment on Image {
  uri
  width
  height
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "body": {
        "text": "<mock-value-for-field-\\"text\\">"
      },
      "actor": null,
      "myActor": {
        "__typename": "User",
        "id": "<mock-id-2>",
        "name": "<mock-value-for-field-\\"name\\">"
      },
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42
      }
    }
  }
}
`;

exports[`stays synchronous when @defer is disabled 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestDisabledDeferQuery {
  me {
    ...RelayMockPayloadGeneratorTestDisabledDeferFragment @defer
  }
}

fragment RelayMockPayloadGeneratorTestDisabledDeferFragment on User {
  name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "me": {
      "name": "<mock-value-for-field-\\"name\\">"
    }
  }
}
`;

exports[`uses explicit mock data over type based mock data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestDeeplyNestedMockDataQuery {
  me {
    backgroundImage {
      width
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "me": {
      "backgroundImage": {
        "width": 100
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock data with mock resolver for ID that may return \`undefined\` 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest35Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "this-is-my-id",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-1>",
              "name": "<mock-value-for-field-\\"name\\">"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">"
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for enum in arrays 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest40Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      traits
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "traits": [
        "CHEERFUL",
        "DERISIVE"
      ]
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for enum with different case should be OK 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest39Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      environment
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "environment": "WEB"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for simple fragment 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest21Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest28Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest28Fragment on User {
  id
  name
  profile_picture {
    uri
    width
    height
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock for simple query 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest20Query @relay_test_operation {
  me {
    id
    name
    emailAddresses
    profile_picture(scale: 1) {
      uri
      width
      height
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "me": {
      "id": "<User-mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "emailAddresses": [
        "<mock-value-for-field-\\"emailAddresses\\">"
      ],
      "profile_picture": {
        "uri": "<mock-value-for-field-\\"uri\\">",
        "width": 42,
        "height": 42
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Enums 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest22Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
      environment
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "name": "<mock-value-for-field-\\"name\\">",
      "environment": "WEB"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Concrete Type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest23Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-id",
      "name": "my-name"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest24Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-id",
      "name": "my-name"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type with Concrete Type mock resolver 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest27Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-user-id",
      "name": "my-user-name"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type with multiple fragment spreads 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest25Query {
  node(id: "my-id") {
    ...RelayMockPayloadGeneratorTest25Fragment2
  }
}

fragment RelayMockPayloadGeneratorTest25Fragment2 on Node {
  __typename
  ... on User {
    id
    name
  }
  ...RelayMockPayloadGeneratorTest25Fragment1
  id
}

fragment RelayMockPayloadGeneratorTest25Fragment1 on Page {
  id
  pageName: name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "my-page-id",
      "pageName": "<mock-value-for-field-\\"pageName\\">"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Interface Type with multiple fragments 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest26Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ...RelayMockPayloadGeneratorTest29Fragment
    ...RelayMockPayloadGeneratorTest30Fragment
    id
  }
}

fragment RelayMockPayloadGeneratorTest29Fragment on Page {
  id
  pageName: name
}

fragment RelayMockPayloadGeneratorTest30Fragment on User {
  id
  userName: name
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "Page",
      "id": "my-page-id",
      "pageName": "<mock-value-for-field-\\"pageName\\">"
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with Mock Resolvers for Scalar field as null 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest28Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      name
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "my-user-id",
      "name": null
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with default value for object in plural field 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest36Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "Alice"
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with default value for plural field and its object 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest37Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-3>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-4>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-5>",
              "name": "Alice"
            }
          },
          {
            "node": {
              "id": "<User-mock-id-6>",
              "name": "Alice"
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with default value for scalar plural field 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest38Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      emailAddresses
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "emailAddresses": [
        "my@email.com"
      ]
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with empty array for scalar field  1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest30Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      emailAddresses
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "emailAddresses": []
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for linked field with custom data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest33Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "friend-id-2",
              "name": "Alice",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "friend-id-3",
              "name": "Bob",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for linked field with custom data and additional mock resolver 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest34Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "/image-url-3.jpg",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-4>",
              "name": "Bob with Image",
              "profile_picture": {
                "uri": "/image-url-5.jpg",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for linked field with default data 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest31Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "friends": {
        "edges": [
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-3>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-4>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-5>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          },
          {
            "node": {
              "id": "<User-mock-id-6>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays for scalar field 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest29Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      emailAddresses
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-6>",
      "emailAddresses": [
        "mock_email-0-1@fb.com",
        "mock_email-1-2@fb.com",
        "mock_email-2-3@fb.com",
        "mock_email-3-4@fb.com",
        "mock_email-4-5@fb.com"
      ]
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with multiple items in arrays including null 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest32Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      friends {
        edges {
          node {
            id
            name
            profile_picture {
              uri
              width
              height
            }
          }
        }
      }
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "friends": {
        "edges": [
          null,
          {
            "node": {
              "id": "<User-mock-id-2>",
              "name": "<mock-value-for-field-\\"name\\">",
              "profile_picture": {
                "uri": "<mock-value-for-field-\\"uri\\">",
                "width": 42,
                "height": 42
              }
            }
          }
        ]
      }
    }
  }
}
`;

exports[`with @relay_test_operation generate mock with null for enum 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTest42Query @relay_test_operation {
  node(id: "my-id") {
    __typename
    ... on User {
      id
      environment
    }
    id
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "node": {
      "__typename": "User",
      "id": "<mock-id-1>",
      "environment": null
    }
  }
}
`;

exports[`works with root types works with Mutation type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
mutation RelayMockPayloadGeneratorTestQueryTypeMutation {
  unfriend(input: {clientMutationId: "1", friendId: "2"}) {
    formerFriend {
      id
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "unfriend": {
      "formerFriend": {
        "id": "2"
      }
    }
  }
}
`;

exports[`works with root types works with Query type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
query RelayMockPayloadGeneratorTestQueryTypeQuery {
  me {
    name
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "me": {
      "name": "Alice"
    }
  }
}
`;

exports[`works with root types works with Subscription type 1`] = `
~~~~~~~~~~ INPUT ~~~~~~~~~~
subscription RelayMockPayloadGeneratorTestQueryTypeSubscription {
  configCreateSubscribe {
    config {
      name
      isEnabled
    }
  }
}

~~~~~~~~~~ OUTPUT ~~~~~~~~~~
{
  "data": {
    "configCreateSubscribe": {
      "config": {
        "name": "SomeSetting",
        "isEnabled": false
      }
    }
  }
}
`;
