diff --git a/node_modules/@types/relay-compiler/index.d.ts b/node_modules/@types/relay-compiler/index.d.ts
index 91ffc0a..2fa95be 100644
--- a/node_modules/@types/relay-compiler/index.d.ts
+++ b/node_modules/@types/relay-compiler/index.d.ts
@@ -6,7 +6,7 @@
 // TypeScript Version: 3.4
 
 import * as ASTConvert from './lib/core/ASTConvert';
-import { CompilerContext } from './lib/core/CompilerContext';
+import CompilerContext from './lib/core/CompilerContext';
 import * as Parser from './lib/core/RelayParser';
 import * as Printer from './lib/core/IRPrinter';
 import * as IRTransforms from './lib/core/RelayIRTransforms';
diff --git a/node_modules/@types/relay-compiler/lib/codegen/RelayCodeGenerator.d.ts b/node_modules/@types/relay-compiler/lib/codegen/RelayCodeGenerator.d.ts
new file mode 100644
index 0000000..1be6330
--- /dev/null
+++ b/node_modules/@types/relay-compiler/lib/codegen/RelayCodeGenerator.d.ts
@@ -0,0 +1,12 @@
+import { Schema } from "../core/Schema";
+import { Fragment, Request, SplitOperation } from "../core/IR";
+import { ReaderFragment, ConcreteRequest, NormalizationSplitOperation} from "relay-runtime";
+
+declare function generate(schema: Schema, node: Fragment): ReaderFragment;
+declare function generate(schema: Schema, node: Request): ConcreteRequest;
+declare function generate(
+  schema: Schema,
+  node: SplitOperation,
+): NormalizationSplitOperation;
+
+export { generate }
\ No newline at end of file
diff --git a/node_modules/@types/relay-compiler/lib/codegen/compileRelayArtifacts.d.ts b/node_modules/@types/relay-compiler/lib/codegen/compileRelayArtifacts.d.ts
new file mode 100644
index 0000000..e968595
--- /dev/null
+++ b/node_modules/@types/relay-compiler/lib/codegen/compileRelayArtifacts.d.ts
@@ -0,0 +1,9 @@
+import type CompilerContext from '../core/CompilerContext';
+import type {GeneratedDefinition} from '../core/IR';
+import type {GeneratedNode} from 'relay-runtime';
+
+export default function compileRelayArtifacts(
+  context: CompilerContext,
+  transforms: typeof import("../core/RelayIRTransforms"),
+  reporter?: unknown,
+): ReadonlyArray<[GeneratedDefinition, GeneratedNode]>;
\ No newline at end of file
diff --git a/node_modules/@types/relay-compiler/lib/core/CompilerContext.d.ts b/node_modules/@types/relay-compiler/lib/core/CompilerContext.d.ts
index f9753c2..474a6a9 100644
--- a/node_modules/@types/relay-compiler/lib/core/CompilerContext.d.ts
+++ b/node_modules/@types/relay-compiler/lib/core/CompilerContext.d.ts
@@ -8,7 +8,7 @@ export type IRTransform = (
 
 export type CompilerContextDocument = Fragment | Root | SplitOperation;
 
-export class CompilerContext {
+export default class CompilerContext {
   constructor(schema: Schema);
   documents(): CompilerContextDocument[];
   forEachDocument(fn: (doc: CompilerContextDocument) => void): void;
diff --git a/node_modules/@types/relay-compiler/lib/core/Schema.d.ts b/node_modules/@types/relay-compiler/lib/core/Schema.d.ts
index c79aea0..c122c3e 100644
--- a/node_modules/@types/relay-compiler/lib/core/Schema.d.ts
+++ b/node_modules/@types/relay-compiler/lib/core/Schema.d.ts
@@ -3,6 +3,7 @@ import {
     DocumentNode,
     DirectiveLocationEnum,
     ValueNode,
+    Source
 } from 'graphql';
 import { Field as IRField } from './IR';
 
@@ -127,3 +128,5 @@ export interface Schema {
     parseValue: (type: ScalarTypeID | EnumTypeID, value: any) => any;
     serialize: (type: ScalarTypeID | EnumTypeID, value: any) => any;
 }
+
+export function create(source: Source): Schema;
\ No newline at end of file
diff --git a/node_modules/@types/relay-compiler/lib/transforms/ApplyFragmentArgumentTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/ApplyFragmentArgumentTransform.d.ts
index 9edd75a..30f3fc0 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/ApplyFragmentArgumentTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/ApplyFragmentArgumentTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 declare function applyFragmentArgumentTransform(
     context: CompilerContext,
diff --git a/node_modules/@types/relay-compiler/lib/transforms/ConnectionTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/ConnectionTransform.d.ts
index f6066db..b598493 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/ConnectionTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/ConnectionTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 /**
  * This transform rewrites LinkedField nodes with @connection_resolver and rewrites them
diff --git a/node_modules/@types/relay-compiler/lib/transforms/FieldHandleTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/FieldHandleTransform.d.ts
new file mode 100644
index 0000000..b598493
--- /dev/null
+++ b/node_modules/@types/relay-compiler/lib/transforms/FieldHandleTransform.d.ts
@@ -0,0 +1,9 @@
+import CompilerContext from '../core/CompilerContext';
+
+/**
+ * This transform rewrites LinkedField nodes with @connection_resolver and rewrites them
+ * into `ConnectionField` nodes.
+ */
+declare function connectionTransform(context: CompilerContext): CompilerContext;
+
+export { connectionTransform as transform };
diff --git a/node_modules/@types/relay-compiler/lib/transforms/FlattenTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/FlattenTransform.d.ts
index a81eb0b..80c05fa 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/FlattenTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/FlattenTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 export interface FlattenOptions {
     flattenAbstractTypes?: boolean;
diff --git a/node_modules/@types/relay-compiler/lib/transforms/GenerateTypeNameTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/GenerateTypeNameTransform.d.ts
new file mode 100644
index 0000000..25be3b0
--- /dev/null
+++ b/node_modules/@types/relay-compiler/lib/transforms/GenerateTypeNameTransform.d.ts
@@ -0,0 +1,5 @@
+import CompilerContext from 'relay-compiler/lib/core/CompilerContext';
+
+export function transform(
+  context: CompilerContext,
+): CompilerContext;
diff --git a/node_modules/@types/relay-compiler/lib/transforms/InlineFragmentsTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/InlineFragmentsTransform.d.ts
index 11e6b33..7712bff 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/InlineFragmentsTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/InlineFragmentsTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 export function transform(
   context: CompilerContext,
diff --git a/node_modules/@types/relay-compiler/lib/transforms/MaskTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/MaskTransform.d.ts
index 24638ee..566ac4c 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/MaskTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/MaskTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 /**
  * A transform that inlines fragment spreads with the @relay(mask: false)
diff --git a/node_modules/@types/relay-compiler/lib/transforms/MatchTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/MatchTransform.d.ts
index bc5f414..2f35bb5 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/MatchTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/MatchTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 /**
  * This transform rewrites LinkedField nodes with @match and rewrites them
diff --git a/node_modules/@types/relay-compiler/lib/transforms/RefetchableFragmentTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/RefetchableFragmentTransform.d.ts
index 24fddfc..581ca6a 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/RefetchableFragmentTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/RefetchableFragmentTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 /**
  * This transform synthesizes "refetch" queries for fragments that
diff --git a/node_modules/@types/relay-compiler/lib/transforms/RelayDirectiveTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/RelayDirectiveTransform.d.ts
index 445dd3b..2006d8e 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/RelayDirectiveTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/RelayDirectiveTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 /**
  * A transform that extracts `@relay(plural: Boolean)` directives and converts
diff --git a/node_modules/@types/relay-compiler/lib/transforms/SkipRedundantNodesTransform.d.ts b/node_modules/@types/relay-compiler/lib/transforms/SkipRedundantNodesTransform.d.ts
index 03ac747..9c33aad 100644
--- a/node_modules/@types/relay-compiler/lib/transforms/SkipRedundantNodesTransform.d.ts
+++ b/node_modules/@types/relay-compiler/lib/transforms/SkipRedundantNodesTransform.d.ts
@@ -1,4 +1,4 @@
-import { CompilerContext } from '../core/CompilerContext';
+import CompilerContext from '../core/CompilerContext';
 
 declare function skipRedundantNodesTransform(
   context: CompilerContext,
diff --git a/node_modules/@types/relay-compiler/lib/util/dedupeJSONStringify.d.ts b/node_modules/@types/relay-compiler/lib/util/dedupeJSONStringify.d.ts
new file mode 100644
index 0000000..41557c4
--- /dev/null
+++ b/node_modules/@types/relay-compiler/lib/util/dedupeJSONStringify.d.ts
@@ -0,0 +1 @@
+export default function dedupeJSONStringify(value: any): string;
\ No newline at end of file
