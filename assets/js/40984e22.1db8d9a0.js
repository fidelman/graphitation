"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[613],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return b}});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),l=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=l(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),c=l(n),m=r,b=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return n?i.createElement(b,o(o({ref:t},u),{},{components:n})):i.createElement(b,o({ref:t},u))}));function b(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:r,o[1]=p;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3859:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return f},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return l}});var i=n(3117),r=(n(7294),n(3905));const a={sidebar_position:7,id:"use-subscription",title:"useSubscription",description:"API reference for useSubscription, a React hook used to subscribe and unsubscribe from a subscription",keywords:["subscription"]},o=void 0,p={unversionedId:"apollo-react-relay-duct-tape/use-subscription",id:"apollo-react-relay-duct-tape/use-subscription",title:"useSubscription",description:"API reference for useSubscription, a React hook used to subscribe and unsubscribe from a subscription",source:"@site/docs/apollo-react-relay-duct-tape/use-subscription.md",sourceDirName:"apollo-react-relay-duct-tape",slug:"/apollo-react-relay-duct-tape/use-subscription",permalink:"/graphitation/docs/apollo-react-relay-duct-tape/use-subscription",draft:!1,editUrl:"https://github.com/microsoft/graphitation/tree/main/website/docs/apollo-react-relay-duct-tape/use-subscription.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,id:"use-subscription",title:"useSubscription",description:"API reference for useSubscription, a React hook used to subscribe and unsubscribe from a subscription",keywords:["subscription"]},sidebar:"tutorialSidebar",previous:{title:"useMutation",permalink:"/graphitation/docs/apollo-react-relay-duct-tape/use-mutation"}},s={},l=[{value:"<code>useSubscription</code>",id:"usesubscription",level:2},{value:"Arguments",id:"arguments",level:3},{value:"Type <code>GraphQLSubscriptionConfig&lt;TSubscriptionPayload&gt;</code>",id:"type-graphqlsubscriptionconfigtsubscriptionpayload",level:4},{value:"Flow Type Parameters",id:"flow-type-parameters",level:3},{value:"Behavior",id:"behavior",level:3}],u=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=u("FbInternalOnly"),d=u("DocsRating"),m={toc:l},b="wrapper";function f(e){let{components:t,...n}=e;return(0,r.kt)(b,(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"\u26a0\ufe0f ",(0,r.kt)("em",{parentName:"p"},"NOTE: This document still needs to be updated for Apollo React/Relay Duct-Tape.")),(0,r.kt)("h2",{id:"usesubscription"},(0,r.kt)("inlineCode",{parentName:"h2"},"useSubscription")),(0,r.kt)("p",null,"Hook used to subscribe and unsubscribe to a subscription."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"import {graphql, useSubscription} from 'react-relay';\nimport {useMemo} from 'react';\n\nconst subscription = graphql`\n  subscription UserDataSubscription($input: InputData!) {\n    # ...\n  }\n`;\n\nfunction UserComponent({ id }) {\n  // IMPORTANT: your config should be memoized.\n  // Otherwise, useSubscription will re-render too frequently.\n  const config = useMemo(() => ({\n    variables: {id},\n    subscription,\n  }), [id, subscription]);\n\n  useSubscription(config);\n\n  return (/* ... */);\n}\n")),(0,r.kt)("h3",{id:"arguments"},"Arguments"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"config"),": a config of type ",(0,r.kt)("a",{parentName:"li",href:"#type-graphqlsubscriptionconfigtsubscriptionpayload"},(0,r.kt)("inlineCode",{parentName:"a"},"GraphQLSubscriptionConfig"))," passed to ",(0,r.kt)("a",{parentName:"li",href:"../request-subscription/"},(0,r.kt)("inlineCode",{parentName:"a"},"requestSubscription"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"requestSubscriptionFn"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"?<TSubscriptionPayload>(IEnvironment, GraphQLSubscriptionConfig<TSubscriptionPayload>) => Disposable"),". An optional function with the same signature as ",(0,r.kt)("a",{parentName:"li",href:"../request-subscription/"},(0,r.kt)("inlineCode",{parentName:"a"},"requestSubscription")),", which will be called in its stead. Defaults to ",(0,r.kt)("inlineCode",{parentName:"li"},"requestSubscription"),".")),(0,r.kt)("h4",{id:"type-graphqlsubscriptionconfigtsubscriptionpayload"},"Type ",(0,r.kt)("inlineCode",{parentName:"h4"},"GraphQLSubscriptionConfig<TSubscriptionPayload>")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"An object with the following fields:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"cacheConfig"),": ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"[Optional]"))," ",(0,r.kt)("a",{parentName:"li",href:"#type-cacheconfig"},(0,r.kt)("inlineCode",{parentName:"a"},"CacheConfig"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"subscription"),": ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQLTaggedNode"),". A GraphQL subscription specified using a ",(0,r.kt)("inlineCode",{parentName:"li"},"graphql")," template literal"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"variables"),": The variables to pass to the subscription"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onCompleted"),": ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"[Optional]"))," ",(0,r.kt)("inlineCode",{parentName:"li"},"() => void"),". An optional callback that is executed when the subscription is established"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onError"),": ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"[Optional]"))," ",(0,r.kt)("inlineCode",{parentName:"li"},"(Error) => {}"),". An optional callback that is executed when an error occurs"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"onNext"),": ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"[Optional]"))," ",(0,r.kt)("inlineCode",{parentName:"li"},"(TSubscriptionPayload) => {}"),". An optional callback that is executed when new data is received"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"updater"),": ",(0,r.kt)("em",{parentName:"li"},(0,r.kt)("em",{parentName:"em"},"[Optional]"))," ",(0,r.kt)("a",{parentName:"li",href:"#type-selectorstoreupdater"},(0,r.kt)("inlineCode",{parentName:"a"},"SelectorStoreUpdater")),".")))),(0,r.kt)("h3",{id:"flow-type-parameters"},"Flow Type Parameters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"TSubscriptionPayload"),": The type of the payloads vended by the subscription. You should pass the flow type imported from the auto-generated ",(0,r.kt)("inlineCode",{parentName:"li"},".graphql")," file corresponding to the subscription, e.g. use ",(0,r.kt)("inlineCode",{parentName:"li"},"UserDataSubscription")," as the type parameter, from ",(0,r.kt)("inlineCode",{parentName:"li"},"import type {UserDataSubscription} from './__generated__/UserDataSubscription.graphql'"),";")),(0,r.kt)("h3",{id:"behavior"},"Behavior"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This is only a thin wrapper around the ",(0,r.kt)("inlineCode",{parentName:"li"},"requestSubscription")," API. It will:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Subscribe when the component is mounted with the given config"),(0,r.kt)("li",{parentName:"ul"},"Unsubscribe when the component is unmounted"),(0,r.kt)("li",{parentName:"ul"},"Unsubscribe and resubscribe with new values if the environment, config or ",(0,r.kt)("inlineCode",{parentName:"li"},"requestSubscriptionFn")," changes."))),(0,r.kt)("li",{parentName:"ul"},"If you have the need to do something more complicated, such as imperatively requesting a subscription, please use the ",(0,r.kt)("a",{parentName:"li",href:"../request-subscription/"},(0,r.kt)("inlineCode",{parentName:"a"},"requestSubscription"))," API directly."),(0,r.kt)("li",{parentName:"ul"},"See the ",(0,r.kt)("a",{parentName:"li",href:"../../guided-tour/updating-data/graphql-subscriptions/"},"GraphQL Subscriptions Guide")," for a more detailed explanation of how to work with subscriptions.")),(0,r.kt)(c,{mdxType:"FbInternalOnly"},(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"useSubscription")," doesn't automatically add ",(0,r.kt)("inlineCode",{parentName:"p"},"client_subscription_id"),". You may need to provide an arbitrary ",(0,r.kt)("inlineCode",{parentName:"p"},"client_subscription_id")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"config.variables.input")))),(0,r.kt)(d,{mdxType:"DocsRating"}))}f.isMDXComponent=!0}}]);