"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[796],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return u}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),h=p(n),u=o,m=h["".concat(l,".").concat(u)]||h[u]||d[u]||i;return n?a.createElement(m,r(r({ref:t},c),{},{components:n})):a.createElement(m,r({ref:t},c))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var p=2;p<i;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5113:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return h}});var a=n(7462),o=n(3366),i=(n(7294),n(3905)),r=["components"],s={sidebar_position:2,id:"the-design-of-graphql",title:"The design of GraphQL",description:"What was GraphQL designed to solve for and how to leverage that?"},l="The design of GraphQL",p={unversionedId:"learn-graphql/the-design-of-graphql",id:"learn-graphql/the-design-of-graphql",title:"The design of GraphQL",description:"What was GraphQL designed to solve for and how to leverage that?",source:"@site/docs/learn-graphql/the-design-of-graphql.md",sourceDirName:"learn-graphql",slug:"/learn-graphql/the-design-of-graphql",permalink:"/graphitation/docs/learn-graphql/the-design-of-graphql",editUrl:"https://github.com/microsoft/graphitation/tree/main/website/docs/learn-graphql/the-design-of-graphql.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,id:"the-design-of-graphql",title:"The design of GraphQL",description:"What was GraphQL designed to solve for and how to leverage that?"},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/graphitation/docs/learn-graphql/intro"},next:{title:"Intro",permalink:"/graphitation/docs/apollo-react-relay-duct-tape/intro"}},c=[{value:"Flux",id:"flux",children:[],level:2},{value:"The problem",id:"the-problem",children:[{value:"Example",id:"example",children:[],level:3},{value:"Leaky Abstractions",id:"leaky-abstractions",children:[],level:3},{value:"The Solution",id:"the-solution",children:[],level:3},{value:"Conclusion",id:"conclusion",children:[],level:3}],level:2},{value:"Composition",id:"composition",children:[{value:"Local Reasoning",id:"local-reasoning",children:[],level:3},{value:"Global Optimization",id:"global-optimization",children:[],level:3}],level:2},{value:"Closing Statement",id:"closing-statement",children:[],level:2}],d={toc:c};function h(e){var t=e.components,s=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},d,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"the-design-of-graphql"},"The design of GraphQL"),(0,i.kt)("h2",{id:"flux"},"Flux"),(0,i.kt)("p",null,"To understand how Facebook designed GraphQL and React to work together, we must first go back to the origins of React and learn about ",(0,i.kt)("a",{parentName:"p",href:"https://facebook.github.io/flux/docs/in-depth-overview/"},"Flux"),". Flux is the application architecture that Facebook uses for building client-side web applications. It complements React's composable view components by utilizing a unidirectional data flow, making interactions easier to reason about."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6704).Z})),(0,i.kt)("p",null,"But there\u2019s a missing piece here. How do we get the data from the \u201cremote\u201d service into the client in the first place?"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6508).Z})),(0,i.kt)("p",null,"And especially in complex applications, they realised that the service and the view end-up getting coupled together, which makes development difficult."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3156).Z})),(0,i.kt)("h2",{id:"the-problem"},"The problem"),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("p",null,"Let\u2019s take a simple example, here we have the Chat-List component of Teams. There\u2019s a list of conversations, content preview, and some details about the participants. So if we would structure this, there would be 3 major components."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"There\u2019s going to be the outer ",(0,i.kt)("inlineCode",{parentName:"li"},"ChatList")," component."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"ChatList")," component would contain many ",(0,i.kt)("inlineCode",{parentName:"li"},"ChatListItem")," components, one for each conversation that the user has."),(0,i.kt)("li",{parentName:"ul"},"And for each conversation we render some ",(0,i.kt)("inlineCode",{parentName:"li"},"ConversationInfo"),".")),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(6674).Z})),(0,i.kt)("p",null,"So our application looks something like this. We have our tree of components on the client-side, and we have our service endpoint."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(442).Z})),(0,i.kt)("p",null,"The service sends some data down to the client, ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatList")," passes it on to its children, and we populate the data further down through the tree."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(3098).Z})),(0,i.kt)("h3",{id:"leaky-abstractions"},"Leaky Abstractions"),(0,i.kt)("p",null,"But of course this is a simplification, what happens when we add some color to this? The ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatList")," component needs an item count, the ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatListItem")," component needs an avatar, and the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo")," needs a title and last message preview."),(0,i.kt)("p",null,"If we look at what\u2019s actually happening here, we\u2019ve encoded the implementation details of all 3 of our components on the service-side, so it knows what data to pass down.\nFurthermore, if we look at ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo"),", we have actually leaked its details into ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatListItem"),", because it has to know what to pass down as props."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(4990).Z})),(0,i.kt)("p",null,"So what happens when we change ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo"),"? Well, we\u2019re not just changing ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo"),", we\u2019re also changing ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatListItem")," and what it passes down. We might have to change ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatList"),", dependending on how it structured things. And we ",(0,i.kt)("em",{parentName:"p"},"certainly")," have to change the service, so that it sends the new information."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(7961).Z})),(0,i.kt)("p",null,"How did we get here? How did we get to a place where making a simple change to ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo"),", required us not just to touch that component, but to touch its parents\u2014which are potentially many, in a complex application\u2014and to touch the service?"),(0,i.kt)("p",null,"The big problem was a lack of modularity. We wanted ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo")," to be a self-contained component, but it wasn\u2019t. Its implementation details were leaked to ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatListItem"),", ",(0,i.kt)("em",{parentName:"p"},"and")," up to the service. The thing that was missing was a way for ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo")," and other components to specify what data they require. That specification didn\u2019t live in the component itself, it was spread all over the application."),(0,i.kt)("h3",{id:"the-solution"},"The Solution"),(0,i.kt)("p",null,"What we want is some way for each component to statically define its data needs in a simple way."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(5403).Z})),(0,i.kt)("p",null,"And if it can do so in a way that each of its parents can gather up those data needs\u2026"),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(1245).Z})),(0,i.kt)("p",null,"\u2026we can gather up the data requirements ",(0,i.kt)("em",{parentName:"p"},"all")," the way up the stack to the root."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(4785).Z})),(0,i.kt)("p",null,"The root component can then communicate that up to the service. And instead of the service having these data requirements hardcoded, the service can use this aggregated data specification to decide what data to send back to the client."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(2070).Z})),(0,i.kt)("p",null,"From here on out, it\u2019s exactly the same diagram as before. We have a service, the service has the data that our application needs, it sends it to ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatList"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"ChatList")," passes it down to the children, and so forth."),(0,i.kt)("p",null,(0,i.kt)("img",{src:n(8090).Z})),(0,i.kt)("h3",{id:"conclusion"},"Conclusion"),(0,i.kt)("p",null,"It\u2019s a subtle change, but a ",(0,i.kt)("em",{parentName:"p"},"key")," one."),(0,i.kt)("p",null,"We\u2019ve taken the details about what data ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo")," requires ",(0,i.kt)("em",{parentName:"p"},"out")," of the service, where it doesn\u2019t belong, and have put it ",(0,i.kt)("em",{parentName:"p"},"in")," the ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo")," component where it does."),(0,i.kt)("p",null,"Because inherently, our rendering logic for ",(0,i.kt)("inlineCode",{parentName:"p"},"ConversationInfo")," and its data-specifications are tied together. We can\u2019t change one without changing the other. So having them both be in the same component makes life a lot easier."),(0,i.kt)("p",null,"So if we want to do this, if we want each component to be able to specify its own data needs, how can we do so? The realization is that our data-specification has a key property that it needs to fulfill, which is composition."),(0,i.kt)("h2",{id:"composition"},"Composition"),(0,i.kt)("p",null,"Composition in GraphQL is achieved by leveraging fragments, which are snippets of a query that can be composed together to form larger queries. These fragments are colocated with their components and composed into a tree that very much follows the shape of the component tree."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function ChatList() {\n  const data = useLazyLoadQuery(\n    graphql`\n      query ChatListQuery {\n        conversations {\n          id\n          ...ChatListItemFragment\n        }\n      }\n    `,\n  );\n  return (\n    <ul>\n      {data.conversations.map((conversation) => (\n        <ChatListItem conversation={conversation} key={conversation.id} />\n      ))}\n    </ul>\n  );\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function ChatListItem(props) {\n  const conversation = useFragment(\n    graphql`\n      fragment ChatListItemFragment on Conversation {\n        lastMessage {\n          arrivalTime\n          ...ConversationInfoFragment\n        }\n      }\n    `,\n    props.conversation,\n  );\n  return (\n    <li>\n      <ConversationInfo conversation={conversation} />\n      <span>{conversation.lastMessage.arrivalTime}</span>\n    </li>\n  );\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-tsx"},"function ConversationInfo(props) {\n  const conversation = useFragment(\n    graphql`\n      fragment ConversationInfoFragment on Conversation {\n        title\n        lastMessage {\n          preview\n        }\n      }\n    `,\n    props.conversation,\n  );\n  return (\n    <div>\n      <h2>{conversation.title}</h2>\n      <p>{conversation.lastMessage.preview}</p>\n    </div>\n  );\n}\n")),(0,i.kt)("h3",{id:"local-reasoning"},"Local Reasoning"),(0,i.kt)("p",null,"Because a component and its data requirements are self-contained:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Engineers don\u2019t need to jump around the codebase"),(0,i.kt)("li",{parentName:"ul"},"Engineers can safely cleanup data requirements"),(0,i.kt)("li",{parentName:"ul"},"Isolated components can be re-composed into new features"),(0,i.kt)("li",{parentName:"ul"},"Isolated components provide improved developer-experience")),(0,i.kt)("h3",{id:"global-optimization"},"Global Optimization"),(0,i.kt)("p",null,"At the framework level, transperantly to the UI engineer, we can:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Use tooling to extract and optimize query"),(0,i.kt)("li",{parentName:"ul"},"Fetch data in single request for a single render pass"),(0,i.kt)("li",{parentName:"ul"},"Start fetching data ",(0,i.kt)("em",{parentName:"li"},"before")," rendering. For instance at application launch, or when hovering over/near an element"),(0,i.kt)("li",{parentName:"ul"},"Leverage component fragments for narrow store observables, to avoid unnecessary re-rendering of ancestor/sibling components"),(0,i.kt)("li",{parentName:"ul"},"Couple lazy asset loading to data resolving, including the required components themselves"),(0,i.kt)("li",{parentName:"ul"},"Move extracted queries upstream so the pipeline can ahead-of-time optimize/prepare data in a generic manner across builds")),(0,i.kt)("h2",{id:"closing-statement"},"Closing Statement"),(0,i.kt)("p",null,"Unfortunately, due in large part to lack of proper documentation and guidance by Facebook, the community has largely lost sight of these original design considerations. Fragments are seen as a way to DRY up code, rather than uniquely expressing the data requirements of a single component, and often entirely ignored by popular GraphQL clients."),(0,i.kt)("p",null,"Any GraphQL client for data-driven UI applications that does not make fragments the unit around which everything is built, is not setting you up for success\u2014assuming you have needs similar to Facebook."),(0,i.kt)("p",null,"Facebook's own GraphQL client, ",(0,i.kt)("a",{parentName:"p",href:"https://relay.dev"},"Relay"),", is the golden reference for how to do this right."))}h.isMDXComponent=!0},442:function(e,t,n){t.Z=n.p+"assets/images/Slide10-1298febd4fd724fbd900e8c1b52a62a2.png"},3098:function(e,t,n){t.Z=n.p+"assets/images/Slide11-fc704ce0a6249d9e7772991628f1467b.png"},4990:function(e,t,n){t.Z=n.p+"assets/images/Slide13-b2f8c27204e307316722d047dcc219aa.png"},7961:function(e,t,n){t.Z=n.p+"assets/images/Slide14-0d8974bc92a64288e8d3967041ae1af5.png"},5403:function(e,t,n){t.Z=n.p+"assets/images/Slide18-96d1b3db202e1a31aac06dee03e7b958.png"},1245:function(e,t,n){t.Z=n.p+"assets/images/Slide19-e01a363fe393519d687fb9dbb80d7fee.png"},6704:function(e,t,n){t.Z=n.p+"assets/images/Slide2-178de0b265ac9f6351d52eeff99c37b6.png"},4785:function(e,t,n){t.Z=n.p+"assets/images/Slide20-6385aadfe571f12db3fb937dbe338460.png"},2070:function(e,t,n){t.Z=n.p+"assets/images/Slide22-f6c232cb7962e56d6365e81d40c0f031.png"},8090:function(e,t,n){t.Z=n.p+"assets/images/Slide25-425ae0858073a3d304499d21b370a9e4.png"},6508:function(e,t,n){t.Z=n.p+"assets/images/Slide3-741b34d3834a98e84e2a8881ea1dfe9e.png"},3156:function(e,t,n){t.Z=n.p+"assets/images/Slide4-979433053f247f57d8efd24756140674.png"},6674:function(e,t,n){t.Z=n.p+"assets/images/Slide7+8+9-e961e765b175dddb6e4a59dc8fe627dc.png"}}]);